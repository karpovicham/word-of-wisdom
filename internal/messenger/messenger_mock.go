package messenger

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/karpovicham/word-of-wisdom/internal/proto"
)

// MessengerMock implements Messenger
type MessengerMock struct {
	t minimock.Tester

	funcReceive          func() (mp1 *proto.Message, err error)
	inspectFuncReceive   func()
	afterReceiveCounter  uint64
	beforeReceiveCounter uint64
	ReceiveMock          mMessengerMockReceive

	funcSend          func(msg *proto.Message) (err error)
	inspectFuncSend   func(msg *proto.Message)
	afterSendCounter  uint64
	beforeSendCounter uint64
	SendMock          mMessengerMockSend
}

// NewMessengerMock returns a mock for Messenger
func NewMessengerMock(t minimock.Tester) *MessengerMock {
	m := &MessengerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ReceiveMock = mMessengerMockReceive{mock: m}

	m.SendMock = mMessengerMockSend{mock: m}
	m.SendMock.callArgs = []*MessengerMockSendParams{}

	return m
}

type mMessengerMockReceive struct {
	mock               *MessengerMock
	defaultExpectation *MessengerMockReceiveExpectation
	expectations       []*MessengerMockReceiveExpectation
}

// MessengerMockReceiveExpectation specifies expectation struct of the Messenger.Receive
type MessengerMockReceiveExpectation struct {
	mock *MessengerMock

	results *MessengerMockReceiveResults
	Counter uint64
}

// MessengerMockReceiveResults contains results of the Messenger.Receive
type MessengerMockReceiveResults struct {
	mp1 *proto.Message
	err error
}

// Expect sets up expected params for Messenger.Receive
func (mmReceive *mMessengerMockReceive) Expect() *mMessengerMockReceive {
	if mmReceive.mock.funcReceive != nil {
		mmReceive.mock.t.Fatalf("MessengerMock.Receive mock is already set by Set")
	}

	if mmReceive.defaultExpectation == nil {
		mmReceive.defaultExpectation = &MessengerMockReceiveExpectation{}
	}

	return mmReceive
}

// Inspect accepts an inspector function that has same arguments as the Messenger.Receive
func (mmReceive *mMessengerMockReceive) Inspect(f func()) *mMessengerMockReceive {
	if mmReceive.mock.inspectFuncReceive != nil {
		mmReceive.mock.t.Fatalf("Inspect function is already set for MessengerMock.Receive")
	}

	mmReceive.mock.inspectFuncReceive = f

	return mmReceive
}

// Return sets up results that will be returned by Messenger.Receive
func (mmReceive *mMessengerMockReceive) Return(mp1 *proto.Message, err error) *MessengerMock {
	if mmReceive.mock.funcReceive != nil {
		mmReceive.mock.t.Fatalf("MessengerMock.Receive mock is already set by Set")
	}

	if mmReceive.defaultExpectation == nil {
		mmReceive.defaultExpectation = &MessengerMockReceiveExpectation{mock: mmReceive.mock}
	}
	mmReceive.defaultExpectation.results = &MessengerMockReceiveResults{mp1, err}
	return mmReceive.mock
}

// Set uses given function f to mock the Messenger.Receive method
func (mmReceive *mMessengerMockReceive) Set(f func() (mp1 *proto.Message, err error)) *MessengerMock {
	if mmReceive.defaultExpectation != nil {
		mmReceive.mock.t.Fatalf("Default expectation is already set for the Messenger.Receive method")
	}

	if len(mmReceive.expectations) > 0 {
		mmReceive.mock.t.Fatalf("Some expectations are already set for the Messenger.Receive method")
	}

	mmReceive.mock.funcReceive = f
	return mmReceive.mock
}

// Receive implements Messenger
func (mmReceive *MessengerMock) Receive() (mp1 *proto.Message, err error) {
	mm_atomic.AddUint64(&mmReceive.beforeReceiveCounter, 1)
	defer mm_atomic.AddUint64(&mmReceive.afterReceiveCounter, 1)

	if mmReceive.inspectFuncReceive != nil {
		mmReceive.inspectFuncReceive()
	}

	if mmReceive.ReceiveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReceive.ReceiveMock.defaultExpectation.Counter, 1)

		mm_results := mmReceive.ReceiveMock.defaultExpectation.results
		if mm_results == nil {
			mmReceive.t.Fatal("No results are set for the MessengerMock.Receive")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmReceive.funcReceive != nil {
		return mmReceive.funcReceive()
	}
	mmReceive.t.Fatalf("Unexpected call to MessengerMock.Receive.")
	return
}

// ReceiveAfterCounter returns a count of finished MessengerMock.Receive invocations
func (mmReceive *MessengerMock) ReceiveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReceive.afterReceiveCounter)
}

// ReceiveBeforeCounter returns a count of MessengerMock.Receive invocations
func (mmReceive *MessengerMock) ReceiveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReceive.beforeReceiveCounter)
}

// MinimockReceiveDone returns true if the count of the Receive invocations corresponds
// the number of defined expectations
func (m *MessengerMock) MinimockReceiveDone() bool {
	for _, e := range m.ReceiveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReceiveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReceiveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReceive != nil && mm_atomic.LoadUint64(&m.afterReceiveCounter) < 1 {
		return false
	}
	return true
}

// MinimockReceiveInspect logs each unmet expectation
func (m *MessengerMock) MinimockReceiveInspect() {
	for _, e := range m.ReceiveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MessengerMock.Receive")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReceiveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReceiveCounter) < 1 {
		m.t.Error("Expected call to MessengerMock.Receive")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReceive != nil && mm_atomic.LoadUint64(&m.afterReceiveCounter) < 1 {
		m.t.Error("Expected call to MessengerMock.Receive")
	}
}

type mMessengerMockSend struct {
	mock               *MessengerMock
	defaultExpectation *MessengerMockSendExpectation
	expectations       []*MessengerMockSendExpectation

	callArgs []*MessengerMockSendParams
	mutex    sync.RWMutex
}

// MessengerMockSendExpectation specifies expectation struct of the Messenger.Send
type MessengerMockSendExpectation struct {
	mock    *MessengerMock
	params  *MessengerMockSendParams
	results *MessengerMockSendResults
	Counter uint64
}

// MessengerMockSendParams contains parameters of the Messenger.Send
type MessengerMockSendParams struct {
	msg *proto.Message
}

// MessengerMockSendResults contains results of the Messenger.Send
type MessengerMockSendResults struct {
	err error
}

// Expect sets up expected params for Messenger.Send
func (mmSend *mMessengerMockSend) Expect(msg *proto.Message) *mMessengerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("MessengerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &MessengerMockSendExpectation{}
	}

	mmSend.defaultExpectation.params = &MessengerMockSendParams{msg}
	for _, e := range mmSend.expectations {
		if minimock.Equal(e.params, mmSend.defaultExpectation.params) {
			mmSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSend.defaultExpectation.params)
		}
	}

	return mmSend
}

// Inspect accepts an inspector function that has same arguments as the Messenger.Send
func (mmSend *mMessengerMockSend) Inspect(f func(msg *proto.Message)) *mMessengerMockSend {
	if mmSend.mock.inspectFuncSend != nil {
		mmSend.mock.t.Fatalf("Inspect function is already set for MessengerMock.Send")
	}

	mmSend.mock.inspectFuncSend = f

	return mmSend
}

// Return sets up results that will be returned by Messenger.Send
func (mmSend *mMessengerMockSend) Return(err error) *MessengerMock {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("MessengerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &MessengerMockSendExpectation{mock: mmSend.mock}
	}
	mmSend.defaultExpectation.results = &MessengerMockSendResults{err}
	return mmSend.mock
}

// Set uses given function f to mock the Messenger.Send method
func (mmSend *mMessengerMockSend) Set(f func(msg *proto.Message) (err error)) *MessengerMock {
	if mmSend.defaultExpectation != nil {
		mmSend.mock.t.Fatalf("Default expectation is already set for the Messenger.Send method")
	}

	if len(mmSend.expectations) > 0 {
		mmSend.mock.t.Fatalf("Some expectations are already set for the Messenger.Send method")
	}

	mmSend.mock.funcSend = f
	return mmSend.mock
}

// When sets expectation for the Messenger.Send which will trigger the result defined by the following
// Then helper
func (mmSend *mMessengerMockSend) When(msg *proto.Message) *MessengerMockSendExpectation {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("MessengerMock.Send mock is already set by Set")
	}

	expectation := &MessengerMockSendExpectation{
		mock:   mmSend.mock,
		params: &MessengerMockSendParams{msg},
	}
	mmSend.expectations = append(mmSend.expectations, expectation)
	return expectation
}

// Then sets up Messenger.Send return parameters for the expectation previously defined by the When method
func (e *MessengerMockSendExpectation) Then(err error) *MessengerMock {
	e.results = &MessengerMockSendResults{err}
	return e.mock
}

// Send implements Messenger
func (mmSend *MessengerMock) Send(msg *proto.Message) (err error) {
	mm_atomic.AddUint64(&mmSend.beforeSendCounter, 1)
	defer mm_atomic.AddUint64(&mmSend.afterSendCounter, 1)

	if mmSend.inspectFuncSend != nil {
		mmSend.inspectFuncSend(msg)
	}

	mm_params := &MessengerMockSendParams{msg}

	// Record call args
	mmSend.SendMock.mutex.Lock()
	mmSend.SendMock.callArgs = append(mmSend.SendMock.callArgs, mm_params)
	mmSend.SendMock.mutex.Unlock()

	for _, e := range mmSend.SendMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSend.SendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSend.SendMock.defaultExpectation.Counter, 1)
		mm_want := mmSend.SendMock.defaultExpectation.params
		mm_got := MessengerMockSendParams{msg}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSend.t.Errorf("MessengerMock.Send got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSend.SendMock.defaultExpectation.results
		if mm_results == nil {
			mmSend.t.Fatal("No results are set for the MessengerMock.Send")
		}
		return (*mm_results).err
	}
	if mmSend.funcSend != nil {
		return mmSend.funcSend(msg)
	}
	mmSend.t.Fatalf("Unexpected call to MessengerMock.Send. %v", msg)
	return
}

// SendAfterCounter returns a count of finished MessengerMock.Send invocations
func (mmSend *MessengerMock) SendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.afterSendCounter)
}

// SendBeforeCounter returns a count of MessengerMock.Send invocations
func (mmSend *MessengerMock) SendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.beforeSendCounter)
}

// Calls returns a list of arguments used in each call to MessengerMock.Send.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSend *mMessengerMockSend) Calls() []*MessengerMockSendParams {
	mmSend.mutex.RLock()

	argCopy := make([]*MessengerMockSendParams, len(mmSend.callArgs))
	copy(argCopy, mmSend.callArgs)

	mmSend.mutex.RUnlock()

	return argCopy
}

// MinimockSendDone returns true if the count of the Send invocations corresponds
// the number of defined expectations
func (m *MessengerMock) MinimockSendDone() bool {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendInspect logs each unmet expectation
func (m *MessengerMock) MinimockSendInspect() {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessengerMock.Send with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		if m.SendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessengerMock.Send")
		} else {
			m.t.Errorf("Expected call to MessengerMock.Send with params: %#v", *m.SendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		m.t.Error("Expected call to MessengerMock.Send")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessengerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockReceiveInspect()

		m.MinimockSendInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessengerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessengerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockReceiveDone() &&
		m.MinimockSendDone()
}
