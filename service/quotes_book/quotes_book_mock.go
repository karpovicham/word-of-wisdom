package quotes_book

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// QuotesBookMock implements QuotesBook
type QuotesBookMock struct {
	t minimock.Tester

	funcGetRandomQuote          func(ctx context.Context) (q1 Quote, err error)
	inspectFuncGetRandomQuote   func(ctx context.Context)
	afterGetRandomQuoteCounter  uint64
	beforeGetRandomQuoteCounter uint64
	GetRandomQuoteMock          mQuotesBookMockGetRandomQuote
}

// NewQuotesBookMock returns a mock for QuotesBook
func NewQuotesBookMock(t minimock.Tester) *QuotesBookMock {
	m := &QuotesBookMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetRandomQuoteMock = mQuotesBookMockGetRandomQuote{mock: m}
	m.GetRandomQuoteMock.callArgs = []*QuotesBookMockGetRandomQuoteParams{}

	return m
}

type mQuotesBookMockGetRandomQuote struct {
	mock               *QuotesBookMock
	defaultExpectation *QuotesBookMockGetRandomQuoteExpectation
	expectations       []*QuotesBookMockGetRandomQuoteExpectation

	callArgs []*QuotesBookMockGetRandomQuoteParams
	mutex    sync.RWMutex
}

// QuotesBookMockGetRandomQuoteExpectation specifies expectation struct of the QuotesBook.GetRandomQuote
type QuotesBookMockGetRandomQuoteExpectation struct {
	mock    *QuotesBookMock
	params  *QuotesBookMockGetRandomQuoteParams
	results *QuotesBookMockGetRandomQuoteResults
	Counter uint64
}

// QuotesBookMockGetRandomQuoteParams contains parameters of the QuotesBook.GetRandomQuote
type QuotesBookMockGetRandomQuoteParams struct {
	ctx context.Context
}

// QuotesBookMockGetRandomQuoteResults contains results of the QuotesBook.GetRandomQuote
type QuotesBookMockGetRandomQuoteResults struct {
	q1  Quote
	err error
}

// Expect sets up expected params for QuotesBook.GetRandomQuote
func (mmGetRandomQuote *mQuotesBookMockGetRandomQuote) Expect(ctx context.Context) *mQuotesBookMockGetRandomQuote {
	if mmGetRandomQuote.mock.funcGetRandomQuote != nil {
		mmGetRandomQuote.mock.t.Fatalf("QuotesBookMock.GetRandomQuote mock is already set by Set")
	}

	if mmGetRandomQuote.defaultExpectation == nil {
		mmGetRandomQuote.defaultExpectation = &QuotesBookMockGetRandomQuoteExpectation{}
	}

	mmGetRandomQuote.defaultExpectation.params = &QuotesBookMockGetRandomQuoteParams{ctx}
	for _, e := range mmGetRandomQuote.expectations {
		if minimock.Equal(e.params, mmGetRandomQuote.defaultExpectation.params) {
			mmGetRandomQuote.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRandomQuote.defaultExpectation.params)
		}
	}

	return mmGetRandomQuote
}

// Inspect accepts an inspector function that has same arguments as the QuotesBook.GetRandomQuote
func (mmGetRandomQuote *mQuotesBookMockGetRandomQuote) Inspect(f func(ctx context.Context)) *mQuotesBookMockGetRandomQuote {
	if mmGetRandomQuote.mock.inspectFuncGetRandomQuote != nil {
		mmGetRandomQuote.mock.t.Fatalf("Inspect function is already set for QuotesBookMock.GetRandomQuote")
	}

	mmGetRandomQuote.mock.inspectFuncGetRandomQuote = f

	return mmGetRandomQuote
}

// Return sets up results that will be returned by QuotesBook.GetRandomQuote
func (mmGetRandomQuote *mQuotesBookMockGetRandomQuote) Return(q1 Quote, err error) *QuotesBookMock {
	if mmGetRandomQuote.mock.funcGetRandomQuote != nil {
		mmGetRandomQuote.mock.t.Fatalf("QuotesBookMock.GetRandomQuote mock is already set by Set")
	}

	if mmGetRandomQuote.defaultExpectation == nil {
		mmGetRandomQuote.defaultExpectation = &QuotesBookMockGetRandomQuoteExpectation{mock: mmGetRandomQuote.mock}
	}
	mmGetRandomQuote.defaultExpectation.results = &QuotesBookMockGetRandomQuoteResults{q1, err}
	return mmGetRandomQuote.mock
}

// Set uses given function f to mock the QuotesBook.GetRandomQuote method
func (mmGetRandomQuote *mQuotesBookMockGetRandomQuote) Set(f func(ctx context.Context) (q1 Quote, err error)) *QuotesBookMock {
	if mmGetRandomQuote.defaultExpectation != nil {
		mmGetRandomQuote.mock.t.Fatalf("Default expectation is already set for the QuotesBook.GetRandomQuote method")
	}

	if len(mmGetRandomQuote.expectations) > 0 {
		mmGetRandomQuote.mock.t.Fatalf("Some expectations are already set for the QuotesBook.GetRandomQuote method")
	}

	mmGetRandomQuote.mock.funcGetRandomQuote = f
	return mmGetRandomQuote.mock
}

// When sets expectation for the QuotesBook.GetRandomQuote which will trigger the result defined by the following
// Then helper
func (mmGetRandomQuote *mQuotesBookMockGetRandomQuote) When(ctx context.Context) *QuotesBookMockGetRandomQuoteExpectation {
	if mmGetRandomQuote.mock.funcGetRandomQuote != nil {
		mmGetRandomQuote.mock.t.Fatalf("QuotesBookMock.GetRandomQuote mock is already set by Set")
	}

	expectation := &QuotesBookMockGetRandomQuoteExpectation{
		mock:   mmGetRandomQuote.mock,
		params: &QuotesBookMockGetRandomQuoteParams{ctx},
	}
	mmGetRandomQuote.expectations = append(mmGetRandomQuote.expectations, expectation)
	return expectation
}

// Then sets up QuotesBook.GetRandomQuote return parameters for the expectation previously defined by the When method
func (e *QuotesBookMockGetRandomQuoteExpectation) Then(q1 Quote, err error) *QuotesBookMock {
	e.results = &QuotesBookMockGetRandomQuoteResults{q1, err}
	return e.mock
}

// GetRandomQuote implements QuotesBook
func (mmGetRandomQuote *QuotesBookMock) GetRandomQuote(ctx context.Context) (q1 Quote, err error) {
	mm_atomic.AddUint64(&mmGetRandomQuote.beforeGetRandomQuoteCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRandomQuote.afterGetRandomQuoteCounter, 1)

	if mmGetRandomQuote.inspectFuncGetRandomQuote != nil {
		mmGetRandomQuote.inspectFuncGetRandomQuote(ctx)
	}

	mm_params := &QuotesBookMockGetRandomQuoteParams{ctx}

	// Record call args
	mmGetRandomQuote.GetRandomQuoteMock.mutex.Lock()
	mmGetRandomQuote.GetRandomQuoteMock.callArgs = append(mmGetRandomQuote.GetRandomQuoteMock.callArgs, mm_params)
	mmGetRandomQuote.GetRandomQuoteMock.mutex.Unlock()

	for _, e := range mmGetRandomQuote.GetRandomQuoteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.q1, e.results.err
		}
	}

	if mmGetRandomQuote.GetRandomQuoteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRandomQuote.GetRandomQuoteMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRandomQuote.GetRandomQuoteMock.defaultExpectation.params
		mm_got := QuotesBookMockGetRandomQuoteParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRandomQuote.t.Errorf("QuotesBookMock.GetRandomQuote got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRandomQuote.GetRandomQuoteMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRandomQuote.t.Fatal("No results are set for the QuotesBookMock.GetRandomQuote")
		}
		return (*mm_results).q1, (*mm_results).err
	}
	if mmGetRandomQuote.funcGetRandomQuote != nil {
		return mmGetRandomQuote.funcGetRandomQuote(ctx)
	}
	mmGetRandomQuote.t.Fatalf("Unexpected call to QuotesBookMock.GetRandomQuote. %v", ctx)
	return
}

// GetRandomQuoteAfterCounter returns a count of finished QuotesBookMock.GetRandomQuote invocations
func (mmGetRandomQuote *QuotesBookMock) GetRandomQuoteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRandomQuote.afterGetRandomQuoteCounter)
}

// GetRandomQuoteBeforeCounter returns a count of QuotesBookMock.GetRandomQuote invocations
func (mmGetRandomQuote *QuotesBookMock) GetRandomQuoteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRandomQuote.beforeGetRandomQuoteCounter)
}

// Calls returns a list of arguments used in each call to QuotesBookMock.GetRandomQuote.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRandomQuote *mQuotesBookMockGetRandomQuote) Calls() []*QuotesBookMockGetRandomQuoteParams {
	mmGetRandomQuote.mutex.RLock()

	argCopy := make([]*QuotesBookMockGetRandomQuoteParams, len(mmGetRandomQuote.callArgs))
	copy(argCopy, mmGetRandomQuote.callArgs)

	mmGetRandomQuote.mutex.RUnlock()

	return argCopy
}

// MinimockGetRandomQuoteDone returns true if the count of the GetRandomQuote invocations corresponds
// the number of defined expectations
func (m *QuotesBookMock) MinimockGetRandomQuoteDone() bool {
	for _, e := range m.GetRandomQuoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRandomQuoteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRandomQuoteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRandomQuote != nil && mm_atomic.LoadUint64(&m.afterGetRandomQuoteCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetRandomQuoteInspect logs each unmet expectation
func (m *QuotesBookMock) MinimockGetRandomQuoteInspect() {
	for _, e := range m.GetRandomQuoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to QuotesBookMock.GetRandomQuote with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRandomQuoteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRandomQuoteCounter) < 1 {
		if m.GetRandomQuoteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to QuotesBookMock.GetRandomQuote")
		} else {
			m.t.Errorf("Expected call to QuotesBookMock.GetRandomQuote with params: %#v", *m.GetRandomQuoteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRandomQuote != nil && mm_atomic.LoadUint64(&m.afterGetRandomQuoteCounter) < 1 {
		m.t.Error("Expected call to QuotesBookMock.GetRandomQuote")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *QuotesBookMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetRandomQuoteInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *QuotesBookMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *QuotesBookMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetRandomQuoteDone()
}
