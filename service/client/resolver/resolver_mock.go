package resolver

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"
	"wow/pkg/pow"
	"wow/service/quotes_book"

	"github.com/gojuno/minimock/v3"
)

// ResolverMock implements Resolver
type ResolverMock struct {
	t minimock.Tester

	funcRequestChallenge          func() (d1 pow.Data, err error)
	inspectFuncRequestChallenge   func()
	afterRequestChallengeCounter  uint64
	beforeRequestChallengeCounter uint64
	RequestChallengeMock          mResolverMockRequestChallenge

	funcRequestQuote          func(powData pow.Data) (qp1 *quotes_book.Quote, err error)
	inspectFuncRequestQuote   func(powData pow.Data)
	afterRequestQuoteCounter  uint64
	beforeRequestQuoteCounter uint64
	RequestQuoteMock          mResolverMockRequestQuote

	funcStop          func() (err error)
	inspectFuncStop   func()
	afterStopCounter  uint64
	beforeStopCounter uint64
	StopMock          mResolverMockStop
}

// NewResolverMock returns a mock for Resolver
func NewResolverMock(t minimock.Tester) *ResolverMock {
	m := &ResolverMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RequestChallengeMock = mResolverMockRequestChallenge{mock: m}

	m.RequestQuoteMock = mResolverMockRequestQuote{mock: m}
	m.RequestQuoteMock.callArgs = []*ResolverMockRequestQuoteParams{}

	m.StopMock = mResolverMockStop{mock: m}

	return m
}

type mResolverMockRequestChallenge struct {
	mock               *ResolverMock
	defaultExpectation *ResolverMockRequestChallengeExpectation
	expectations       []*ResolverMockRequestChallengeExpectation
}

// ResolverMockRequestChallengeExpectation specifies expectation struct of the Resolver.RequestChallenge
type ResolverMockRequestChallengeExpectation struct {
	mock *ResolverMock

	results *ResolverMockRequestChallengeResults
	Counter uint64
}

// ResolverMockRequestChallengeResults contains results of the Resolver.RequestChallenge
type ResolverMockRequestChallengeResults struct {
	d1  pow.Data
	err error
}

// Expect sets up expected params for Resolver.RequestChallenge
func (mmRequestChallenge *mResolverMockRequestChallenge) Expect() *mResolverMockRequestChallenge {
	if mmRequestChallenge.mock.funcRequestChallenge != nil {
		mmRequestChallenge.mock.t.Fatalf("ResolverMock.RequestChallenge mock is already set by Set")
	}

	if mmRequestChallenge.defaultExpectation == nil {
		mmRequestChallenge.defaultExpectation = &ResolverMockRequestChallengeExpectation{}
	}

	return mmRequestChallenge
}

// Inspect accepts an inspector function that has same arguments as the Resolver.RequestChallenge
func (mmRequestChallenge *mResolverMockRequestChallenge) Inspect(f func()) *mResolverMockRequestChallenge {
	if mmRequestChallenge.mock.inspectFuncRequestChallenge != nil {
		mmRequestChallenge.mock.t.Fatalf("Inspect function is already set for ResolverMock.RequestChallenge")
	}

	mmRequestChallenge.mock.inspectFuncRequestChallenge = f

	return mmRequestChallenge
}

// Return sets up results that will be returned by Resolver.RequestChallenge
func (mmRequestChallenge *mResolverMockRequestChallenge) Return(d1 pow.Data, err error) *ResolverMock {
	if mmRequestChallenge.mock.funcRequestChallenge != nil {
		mmRequestChallenge.mock.t.Fatalf("ResolverMock.RequestChallenge mock is already set by Set")
	}

	if mmRequestChallenge.defaultExpectation == nil {
		mmRequestChallenge.defaultExpectation = &ResolverMockRequestChallengeExpectation{mock: mmRequestChallenge.mock}
	}
	mmRequestChallenge.defaultExpectation.results = &ResolverMockRequestChallengeResults{d1, err}
	return mmRequestChallenge.mock
}

// Set uses given function f to mock the Resolver.RequestChallenge method
func (mmRequestChallenge *mResolverMockRequestChallenge) Set(f func() (d1 pow.Data, err error)) *ResolverMock {
	if mmRequestChallenge.defaultExpectation != nil {
		mmRequestChallenge.mock.t.Fatalf("Default expectation is already set for the Resolver.RequestChallenge method")
	}

	if len(mmRequestChallenge.expectations) > 0 {
		mmRequestChallenge.mock.t.Fatalf("Some expectations are already set for the Resolver.RequestChallenge method")
	}

	mmRequestChallenge.mock.funcRequestChallenge = f
	return mmRequestChallenge.mock
}

// RequestChallenge implements Resolver
func (mmRequestChallenge *ResolverMock) RequestChallenge() (d1 pow.Data, err error) {
	mm_atomic.AddUint64(&mmRequestChallenge.beforeRequestChallengeCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestChallenge.afterRequestChallengeCounter, 1)

	if mmRequestChallenge.inspectFuncRequestChallenge != nil {
		mmRequestChallenge.inspectFuncRequestChallenge()
	}

	if mmRequestChallenge.RequestChallengeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestChallenge.RequestChallengeMock.defaultExpectation.Counter, 1)

		mm_results := mmRequestChallenge.RequestChallengeMock.defaultExpectation.results
		if mm_results == nil {
			mmRequestChallenge.t.Fatal("No results are set for the ResolverMock.RequestChallenge")
		}
		return (*mm_results).d1, (*mm_results).err
	}
	if mmRequestChallenge.funcRequestChallenge != nil {
		return mmRequestChallenge.funcRequestChallenge()
	}
	mmRequestChallenge.t.Fatalf("Unexpected call to ResolverMock.RequestChallenge.")
	return
}

// RequestChallengeAfterCounter returns a count of finished ResolverMock.RequestChallenge invocations
func (mmRequestChallenge *ResolverMock) RequestChallengeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestChallenge.afterRequestChallengeCounter)
}

// RequestChallengeBeforeCounter returns a count of ResolverMock.RequestChallenge invocations
func (mmRequestChallenge *ResolverMock) RequestChallengeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestChallenge.beforeRequestChallengeCounter)
}

// MinimockRequestChallengeDone returns true if the count of the RequestChallenge invocations corresponds
// the number of defined expectations
func (m *ResolverMock) MinimockRequestChallengeDone() bool {
	for _, e := range m.RequestChallengeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestChallengeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestChallengeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestChallenge != nil && mm_atomic.LoadUint64(&m.afterRequestChallengeCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestChallengeInspect logs each unmet expectation
func (m *ResolverMock) MinimockRequestChallengeInspect() {
	for _, e := range m.RequestChallengeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ResolverMock.RequestChallenge")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestChallengeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestChallengeCounter) < 1 {
		m.t.Error("Expected call to ResolverMock.RequestChallenge")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestChallenge != nil && mm_atomic.LoadUint64(&m.afterRequestChallengeCounter) < 1 {
		m.t.Error("Expected call to ResolverMock.RequestChallenge")
	}
}

type mResolverMockRequestQuote struct {
	mock               *ResolverMock
	defaultExpectation *ResolverMockRequestQuoteExpectation
	expectations       []*ResolverMockRequestQuoteExpectation

	callArgs []*ResolverMockRequestQuoteParams
	mutex    sync.RWMutex
}

// ResolverMockRequestQuoteExpectation specifies expectation struct of the Resolver.RequestQuote
type ResolverMockRequestQuoteExpectation struct {
	mock    *ResolverMock
	params  *ResolverMockRequestQuoteParams
	results *ResolverMockRequestQuoteResults
	Counter uint64
}

// ResolverMockRequestQuoteParams contains parameters of the Resolver.RequestQuote
type ResolverMockRequestQuoteParams struct {
	powData pow.Data
}

// ResolverMockRequestQuoteResults contains results of the Resolver.RequestQuote
type ResolverMockRequestQuoteResults struct {
	qp1 *quotes_book.Quote
	err error
}

// Expect sets up expected params for Resolver.RequestQuote
func (mmRequestQuote *mResolverMockRequestQuote) Expect(powData pow.Data) *mResolverMockRequestQuote {
	if mmRequestQuote.mock.funcRequestQuote != nil {
		mmRequestQuote.mock.t.Fatalf("ResolverMock.RequestQuote mock is already set by Set")
	}

	if mmRequestQuote.defaultExpectation == nil {
		mmRequestQuote.defaultExpectation = &ResolverMockRequestQuoteExpectation{}
	}

	mmRequestQuote.defaultExpectation.params = &ResolverMockRequestQuoteParams{powData}
	for _, e := range mmRequestQuote.expectations {
		if minimock.Equal(e.params, mmRequestQuote.defaultExpectation.params) {
			mmRequestQuote.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRequestQuote.defaultExpectation.params)
		}
	}

	return mmRequestQuote
}

// Inspect accepts an inspector function that has same arguments as the Resolver.RequestQuote
func (mmRequestQuote *mResolverMockRequestQuote) Inspect(f func(powData pow.Data)) *mResolverMockRequestQuote {
	if mmRequestQuote.mock.inspectFuncRequestQuote != nil {
		mmRequestQuote.mock.t.Fatalf("Inspect function is already set for ResolverMock.RequestQuote")
	}

	mmRequestQuote.mock.inspectFuncRequestQuote = f

	return mmRequestQuote
}

// Return sets up results that will be returned by Resolver.RequestQuote
func (mmRequestQuote *mResolverMockRequestQuote) Return(qp1 *quotes_book.Quote, err error) *ResolverMock {
	if mmRequestQuote.mock.funcRequestQuote != nil {
		mmRequestQuote.mock.t.Fatalf("ResolverMock.RequestQuote mock is already set by Set")
	}

	if mmRequestQuote.defaultExpectation == nil {
		mmRequestQuote.defaultExpectation = &ResolverMockRequestQuoteExpectation{mock: mmRequestQuote.mock}
	}
	mmRequestQuote.defaultExpectation.results = &ResolverMockRequestQuoteResults{qp1, err}
	return mmRequestQuote.mock
}

// Set uses given function f to mock the Resolver.RequestQuote method
func (mmRequestQuote *mResolverMockRequestQuote) Set(f func(powData pow.Data) (qp1 *quotes_book.Quote, err error)) *ResolverMock {
	if mmRequestQuote.defaultExpectation != nil {
		mmRequestQuote.mock.t.Fatalf("Default expectation is already set for the Resolver.RequestQuote method")
	}

	if len(mmRequestQuote.expectations) > 0 {
		mmRequestQuote.mock.t.Fatalf("Some expectations are already set for the Resolver.RequestQuote method")
	}

	mmRequestQuote.mock.funcRequestQuote = f
	return mmRequestQuote.mock
}

// When sets expectation for the Resolver.RequestQuote which will trigger the result defined by the following
// Then helper
func (mmRequestQuote *mResolverMockRequestQuote) When(powData pow.Data) *ResolverMockRequestQuoteExpectation {
	if mmRequestQuote.mock.funcRequestQuote != nil {
		mmRequestQuote.mock.t.Fatalf("ResolverMock.RequestQuote mock is already set by Set")
	}

	expectation := &ResolverMockRequestQuoteExpectation{
		mock:   mmRequestQuote.mock,
		params: &ResolverMockRequestQuoteParams{powData},
	}
	mmRequestQuote.expectations = append(mmRequestQuote.expectations, expectation)
	return expectation
}

// Then sets up Resolver.RequestQuote return parameters for the expectation previously defined by the When method
func (e *ResolverMockRequestQuoteExpectation) Then(qp1 *quotes_book.Quote, err error) *ResolverMock {
	e.results = &ResolverMockRequestQuoteResults{qp1, err}
	return e.mock
}

// RequestQuote implements Resolver
func (mmRequestQuote *ResolverMock) RequestQuote(powData pow.Data) (qp1 *quotes_book.Quote, err error) {
	mm_atomic.AddUint64(&mmRequestQuote.beforeRequestQuoteCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestQuote.afterRequestQuoteCounter, 1)

	if mmRequestQuote.inspectFuncRequestQuote != nil {
		mmRequestQuote.inspectFuncRequestQuote(powData)
	}

	mm_params := &ResolverMockRequestQuoteParams{powData}

	// Record call args
	mmRequestQuote.RequestQuoteMock.mutex.Lock()
	mmRequestQuote.RequestQuoteMock.callArgs = append(mmRequestQuote.RequestQuoteMock.callArgs, mm_params)
	mmRequestQuote.RequestQuoteMock.mutex.Unlock()

	for _, e := range mmRequestQuote.RequestQuoteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.qp1, e.results.err
		}
	}

	if mmRequestQuote.RequestQuoteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestQuote.RequestQuoteMock.defaultExpectation.Counter, 1)
		mm_want := mmRequestQuote.RequestQuoteMock.defaultExpectation.params
		mm_got := ResolverMockRequestQuoteParams{powData}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRequestQuote.t.Errorf("ResolverMock.RequestQuote got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRequestQuote.RequestQuoteMock.defaultExpectation.results
		if mm_results == nil {
			mmRequestQuote.t.Fatal("No results are set for the ResolverMock.RequestQuote")
		}
		return (*mm_results).qp1, (*mm_results).err
	}
	if mmRequestQuote.funcRequestQuote != nil {
		return mmRequestQuote.funcRequestQuote(powData)
	}
	mmRequestQuote.t.Fatalf("Unexpected call to ResolverMock.RequestQuote. %v", powData)
	return
}

// RequestQuoteAfterCounter returns a count of finished ResolverMock.RequestQuote invocations
func (mmRequestQuote *ResolverMock) RequestQuoteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestQuote.afterRequestQuoteCounter)
}

// RequestQuoteBeforeCounter returns a count of ResolverMock.RequestQuote invocations
func (mmRequestQuote *ResolverMock) RequestQuoteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestQuote.beforeRequestQuoteCounter)
}

// Calls returns a list of arguments used in each call to ResolverMock.RequestQuote.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRequestQuote *mResolverMockRequestQuote) Calls() []*ResolverMockRequestQuoteParams {
	mmRequestQuote.mutex.RLock()

	argCopy := make([]*ResolverMockRequestQuoteParams, len(mmRequestQuote.callArgs))
	copy(argCopy, mmRequestQuote.callArgs)

	mmRequestQuote.mutex.RUnlock()

	return argCopy
}

// MinimockRequestQuoteDone returns true if the count of the RequestQuote invocations corresponds
// the number of defined expectations
func (m *ResolverMock) MinimockRequestQuoteDone() bool {
	for _, e := range m.RequestQuoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestQuoteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestQuoteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestQuote != nil && mm_atomic.LoadUint64(&m.afterRequestQuoteCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestQuoteInspect logs each unmet expectation
func (m *ResolverMock) MinimockRequestQuoteInspect() {
	for _, e := range m.RequestQuoteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ResolverMock.RequestQuote with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestQuoteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestQuoteCounter) < 1 {
		if m.RequestQuoteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ResolverMock.RequestQuote")
		} else {
			m.t.Errorf("Expected call to ResolverMock.RequestQuote with params: %#v", *m.RequestQuoteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestQuote != nil && mm_atomic.LoadUint64(&m.afterRequestQuoteCounter) < 1 {
		m.t.Error("Expected call to ResolverMock.RequestQuote")
	}
}

type mResolverMockStop struct {
	mock               *ResolverMock
	defaultExpectation *ResolverMockStopExpectation
	expectations       []*ResolverMockStopExpectation
}

// ResolverMockStopExpectation specifies expectation struct of the Resolver.Stop
type ResolverMockStopExpectation struct {
	mock *ResolverMock

	results *ResolverMockStopResults
	Counter uint64
}

// ResolverMockStopResults contains results of the Resolver.Stop
type ResolverMockStopResults struct {
	err error
}

// Expect sets up expected params for Resolver.Stop
func (mmStop *mResolverMockStop) Expect() *mResolverMockStop {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("ResolverMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &ResolverMockStopExpectation{}
	}

	return mmStop
}

// Inspect accepts an inspector function that has same arguments as the Resolver.Stop
func (mmStop *mResolverMockStop) Inspect(f func()) *mResolverMockStop {
	if mmStop.mock.inspectFuncStop != nil {
		mmStop.mock.t.Fatalf("Inspect function is already set for ResolverMock.Stop")
	}

	mmStop.mock.inspectFuncStop = f

	return mmStop
}

// Return sets up results that will be returned by Resolver.Stop
func (mmStop *mResolverMockStop) Return(err error) *ResolverMock {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("ResolverMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &ResolverMockStopExpectation{mock: mmStop.mock}
	}
	mmStop.defaultExpectation.results = &ResolverMockStopResults{err}
	return mmStop.mock
}

// Set uses given function f to mock the Resolver.Stop method
func (mmStop *mResolverMockStop) Set(f func() (err error)) *ResolverMock {
	if mmStop.defaultExpectation != nil {
		mmStop.mock.t.Fatalf("Default expectation is already set for the Resolver.Stop method")
	}

	if len(mmStop.expectations) > 0 {
		mmStop.mock.t.Fatalf("Some expectations are already set for the Resolver.Stop method")
	}

	mmStop.mock.funcStop = f
	return mmStop.mock
}

// Stop implements Resolver
func (mmStop *ResolverMock) Stop() (err error) {
	mm_atomic.AddUint64(&mmStop.beforeStopCounter, 1)
	defer mm_atomic.AddUint64(&mmStop.afterStopCounter, 1)

	if mmStop.inspectFuncStop != nil {
		mmStop.inspectFuncStop()
	}

	if mmStop.StopMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStop.StopMock.defaultExpectation.Counter, 1)

		mm_results := mmStop.StopMock.defaultExpectation.results
		if mm_results == nil {
			mmStop.t.Fatal("No results are set for the ResolverMock.Stop")
		}
		return (*mm_results).err
	}
	if mmStop.funcStop != nil {
		return mmStop.funcStop()
	}
	mmStop.t.Fatalf("Unexpected call to ResolverMock.Stop.")
	return
}

// StopAfterCounter returns a count of finished ResolverMock.Stop invocations
func (mmStop *ResolverMock) StopAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.afterStopCounter)
}

// StopBeforeCounter returns a count of ResolverMock.Stop invocations
func (mmStop *ResolverMock) StopBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.beforeStopCounter)
}

// MinimockStopDone returns true if the count of the Stop invocations corresponds
// the number of defined expectations
func (m *ResolverMock) MinimockStopDone() bool {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	return true
}

// MinimockStopInspect logs each unmet expectation
func (m *ResolverMock) MinimockStopInspect() {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ResolverMock.Stop")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to ResolverMock.Stop")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to ResolverMock.Stop")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ResolverMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRequestChallengeInspect()

		m.MinimockRequestQuoteInspect()

		m.MinimockStopInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ResolverMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ResolverMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRequestChallengeDone() &&
		m.MinimockRequestQuoteDone() &&
		m.MinimockStopDone()
}
